allprojects {
    repositories {
        def BASE_URL = 'https://maven.aliyun.com/repository'
        def MIRROR_PUBLIC_URL = 'https://maven.aliyun.com/repository/public'
        def MIRROR_MAVEN_URL = 'https://maven.aliyun.com/repository/central'
        def MIRROR_JCENTER_URL = 'https://maven.aliyun.com/repository/jcenter'
        def MIRROR_GOOGLE_URL = 'https://maven.aliyun.com/repository/google'
        def MIRROR_GRADLE_PLUGIN_URL = 'https://maven.aliyun.com/repository/gradle-plugin'
        def MIRROR_SPRING_URL = 'https://maven.aliyun.com/repository/spring'
        def MIRROR_SPRING_PLUGIN_URL = 'https://maven.aliyun.com/repository/spring-plugin'
        def MIRROR_GRAILS_CORE_URL = 'https://maven.aliyun.com/repository/grails-core'
        def MIRROR_APACHE_SNAPSHOTS_URL = 'https://maven.aliyun.com/repository/apache-snapshots'
        def ORIGIN_MAVEN_URL = 'https://repo1.maven.org/maven2'
        def ORIGIN_APACHE_MAVEN_URL = 'https://repo.maven.apache.org/maven2'
        def ORIGIN_JCENTER_URL = 'https://jcenter.bintray.com'
        def ORIGIN_GOOGLE_URL = 'https://maven.google.com'
        def ORIGIN_GOOGLE_ANDROID_URL = 'https://dl.google.com/dl/android/maven2'
        def ORIGIN_GRADLE_PLUGIN_URL = 'https://plugins.gradle.org/m2'
        def ORIGIN_GRADLE_LIB_URL = 'https://repo.gradle.org/gradle/list/libs-releases'
        def ORIGIN_GRAILS_CORE_URL = 'https://repo.grails.org/grails/core'
        def ORIGIN_APACHE_SNAPSHOTS_URL = 'https://repository.apache.org/snapshots'
        def ORIGIN_JBOSS_URL = 'https://repository.jboss.org/nexus/content/repositories/public'
        def ORIGIN_SPRING_RELEASE_URL = 'https://repo.spring.io/release'
        def ORIGIN_SPRING_PLUGIN_URL = 'https://repo.spring.io/plugins-release'
        def ORIGIN_SPRING_MILESTONE_URL = 'https://repo.spring.io/milestone'
        def ORIGIN_SPRING_SNAPSHOT_URL = 'https://repo.spring.io/snapshot'
        def ORIGIN_SPRING_LIBS_RELEASE_URL = 'https://repo.spring.io/libs-release'
        def ORIGIN_SPRING_LIBS_MILESTONE_URL = 'https://repo.spring.io/libs-milestone'
        def ORIGIN_SPRING_LIBS_FRAMEWORK_BUILD_URL = 'https://repo.spring.io/libs-spring-framework-build'
        all { ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository) {
                def url = repo.url.toString()
                if (url.startsWith(ORIGIN_MAVEN_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_MAVEN_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_JCENTER_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_JCENTER_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_GOOGLE_URL) || url.startsWith(ORIGIN_GOOGLE_ANDROID_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_GOOGLE_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_GRADLE_PLUGIN_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_GRADLE_PLUGIN_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_SPRING_LIBS_MILESTONE_URL) || url.startsWith(ORIGIN_SPRING_RELEASE_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_SPRING_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_SPRING_PLUGIN_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_SPRING_PLUGIN_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_GRAILS_CORE_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_GRAILS_CORE_URL."
                    remove repo
                } else if (url.startsWith(ORIGIN_APACHE_SNAPSHOTS_URL)) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $MIRROR_APACHE_SNAPSHOTS_URL."
                    remove repo
                } else if (!url.startsWith(BASE_URL)) {
                    project.logger.lifecycle "Using non-mirror repository ${repo.url}."
                }
            }
        }
        // 添加仓库
        maven { url MIRROR_PUBLIC_URL }
        maven { url MIRROR_MAVEN_URL }
        maven { url MIRROR_JCENTER_URL }
        maven { url MIRROR_GOOGLE_URL }
        maven { url MIRROR_GRADLE_PLUGIN_URL }
        maven { url MIRROR_SPRING_URL }
        maven { url MIRROR_SPRING_PLUGIN_URL }
        maven { url MIRROR_GRAILS_CORE_URL }
        maven { url MIRROR_APACHE_SNAPSHOTS_URL }
        mavenLocal()
    }
}